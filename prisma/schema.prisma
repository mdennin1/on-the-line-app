// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////**********ENUMS*******************/////////////////////////////////////
enum AddressType {
  BILLING_ADDRESS_TYPE
  MAILING_ADDRESS_TYPE
  PRIMARY_ADDRESS_TYPE
}

enum ProductCategory {
  FISH
  MEAL
  SAUCE
  SWAG
}

enum States {
  AL
  AK
  AZ
  CA
  CT
  DC
  FL
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  MA
  MD
  ME
  MI
  MN
  MO
  MT
  NC
  NE
  NH
  NJ
  NV
  NY
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  VA
  VT
  WI
  WV
  WY
}

enum Unit {
  LBS
  OZ
  WHOLE
}

enum UserRole {
  ADMIN
  CUSTOMER
  PARTNER
}

/////////////////////////////**********MODELS*******************/////////////////////////////////////
model Address {
  id        Int         @id @default(autoincrement())
  city      String
  country   String      @default("United States")
  createdAt DateTime    @default(now())
  state     States
  street    String
  partner   Partner?    @relation(fields: [partnerId], references: [id])
  partnerId String?
  type      AddressType @default(PRIMARY_ADDRESS_TYPE)
  updatedAt DateTime?   @updatedAt
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?
  zip       String
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  cartItems CartItem[]
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cart      Cart      @relation(fields: [cartId], references: [id])
  cartId    String
  createdAt DateTime  @default(now())
  product   Product   @relation(fields: [item], references: [id])
  item      String
  quantity  Int       @default(1)
  updatedAt DateTime? @updatedAt
}

model Charity {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  name           String
  ein            String?
  description    String
  email          String?
  partnerChairty PartnerCharity[]
  phone          String?
  updatedAt      DateTime?        @updatedAt
  url            String?
}

model Order {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  items       OrderItem[]
  orderNumber Int         @unique @default(autoincrement())
  updatedAt   DateTime?   @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      String
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int       @default(1)
  updatedAt DateTime? @updatedAt
}

model Partner {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  name        String
  Address     Address[]
  charities   PartnerCharity[]
  description String?
  ein         String?          @unique
  products    Product[]
  updatedAt   DateTime?        @updatedAt

  @@unique([id, name])
}

model PartnerCharity {
  id        Int       @id @default(autoincrement())
  charity   Charity   @relation(fields: [charityId], references: [id])
  charityId String
  createdAt DateTime  @default(now())
  partner   Partner   @relation(fields: [partnerId], references: [id])
  partnerId String
  updatedAt DateTime? @updatedAt
}

model Product {
  id          String          @id @default(uuid())
  name        String
  category    ProductCategory @default(FISH)
  createdAt   DateTime        @default(now())
  description String?
  minAmount   Int             @default(1)
  price       Float
  owner       Partner         @relation(fields: [ownerId, ownerName], references: [id, name])
  ownerId     String
  ownerName   String
  sku         String
  unit        Unit
  updatedAt   DateTime?       @updatedAt
  weight      Float
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Profile {
  createdAt DateTime  @default(now())
  id        Int       @id @default(autoincrement())
  name      String    @unique
  updatedAt DateTime? @updatedAt
  User      User[]
}

model User {
  id         String    @id @default(uuid())
  addresses  Address[]
  cart       Cart?
  createdAt  DateTime? @default(now())
  email      String
  firstName  String?
  lastLogin  DateTime? @default(now())
  lastName   String?
  orders     Order[]
  password   String
  phone      String?
  profileRef Profile   @relation(fields: [profile], references: [name])
  profile    String
  role       UserRole  @default(CUSTOMER)
  updatedAt  DateTime? @updatedAt
  username   String    @unique
}
